#Take image and return relevant arrays and points
def takeMulti(fast=False):
    #take image, get its width
    if fast:
        rim=photo(rim,rimext,shutterTime)
    else:
        rim=photo(rim,rimext)
    newIm=cv2.imread(rim)
    picWidth,picHeight=newIm.shape
    #decode
    retval,decoded_info,points,straight_qrcode=qr.detectAndDecodeMulti(newIm)
    #decipher
    myValues=[retval,points]
    return myValues
    

#Decode and return left-most standard alpha-numeric solution
def plantDecode():
    retval=takeMulti()
    if len(retval)>1:
        myCode=retval[0]
    else:
        myCode=''
    return myCode
    

#Move the camera right until a new code is centered
def findAndCenter():
    #move right until no verticies are within center range
    #then continue right until one appears within center range
    walkPos=hw.motorCtl(motorWalk,'f')
    for c in range(1):
        while centerCount!=c and not hw.readSwitch(switchWalkHi):
            #find all codes within view
            allCodes=takeMulti(fast=True)
            #determine if one is in the center range
            myLimits=picWidth*centerRange
            newQ=findCenterQ(allCodes,myLimits)
            centerCount=len(newQ)
        #report timing
        print('Center count = '+str(centerCount)+' near '+str(hw.motorCtl(motorWalk,'f')))
    #take a final image and decode center
    if centerCount==1:
        foundQ, justQR=qr.decode(newQ)
    else:
        foundQ=[]
    return foundQ #decoded qr at center
